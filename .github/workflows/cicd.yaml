name: CI/CD

on: [push, pull_request]

jobs:
  generate_schemas:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: yarn install --frozen-lockfile
      - run: yarn run dev:ci
      - run: sleep 60
      - run: yarn run generate
      - uses: actions/upload-artifact@v2
        with:
          name: schemas
          path: |
            ./schemas/*/schema.graphql
            ./schemas/*/schema.json

  deploy_to_staging:
    runs-on: ubuntu-latest
    needs: generate_schemas
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2

  deploy_to_production:
    runs-on: ubuntu-latest
    needs: generate_schemas
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - id: version
        shell: bash
        run: echo "::set-output name=version::${GITHUB_REF##refs/tags/v}"

  release-npm:
    runs-on: ubuntu-latest
    needs: deploy_to_production
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: schemas
          path: ./schemas/
      - name: Publish NPM package @ctison/hasura-schemas-admin
        shell: bash
        working-directory: ./schemas/admin/
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
          npm version --no-git-tag-version "${{ needs.deploy_to_production.outputs.version }}"
          npm publish --access public
      - name: Publish NPM package @ctison/hasura-schemas-user
        shell: bash
        working-directory: ./schemas/user/
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
          npm version --no-git-tag-version "${{ needs.deploy_to_production.outputs.version }}"
          npm publish --access public

  release-github:
    runs-on: ubuntu-latest
    needs: deploy_to_production
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: schemas
          path: ./schemas/
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.deploy_to_production.outputs.version }}
          release_name: v${{ needs.deploy_to_production.outputs.version }}
          body: |
            ## NPM Packages
            - [@ctison/hasura-schemas-user@${{ needs.deploy_to_production.outputs.version }}](https://www.npmjs.com/package/@ctison/hasura-schemas-user/v/${{ needs.deploy_to_production.outputs.version }})
            - [@ctison/hasura-schemas-admin@${{ needs.deploy_to_production.outputs.version }}](https://www.npmjs.com/package/@ctison/hasura-schemas-admin/v/${{ needs.deploy_to_production.outputs.version }})
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./schemas/user/schema.json
          asset_name: schema.user.json
          asset_content_type: application/json
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./schemas/user/schema.graphql
          asset_name: schema.user.graphql
          asset_content_type: application/graphql
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./schemas/admin/schema.json
          asset_name: schema.admin.json
          asset_content_type: application/json
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./schemas/admin/schema.graphql
          asset_name: schema.admin.graphql
          asset_content_type: application/graphql
